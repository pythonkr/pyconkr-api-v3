name: Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  push:
    branches:
        - 'dev'
        - 'main'

jobs:
  BuildAndDeploy:
    runs-on: ubuntu-latest

    env:
      API_STAGE: ${{ github.ref == 'refs/heads/main' && 'prod' || 'dev' }}
      BUMP_RULE: ${{ github.ref == 'refs/heads/main' && 'patch' || 'prerelease' }}
      AWS_ECR_REGISTRY: ${{ github.ref == 'refs/heads/main' && secrets.AWS_ECR_PROD_URL || secrets.AWS_ECR_DEV_URL }}

    steps:
      # Checkout source codes
      - name: Checkout source codes
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup AWS Credentials, Python, Poetry, docker buildx, and login to ECR.
      - name: Setup AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - run: pipx install poetry
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: poetry
      - run: poetry install --no-interaction --no-root --only=deployment

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.AWS_ECR_REGISTRY }}

      - name: Get current date and repo name
        id: info
        run: |
          echo "::set-output name=date::$(date +'%Y-%m-%d_%H:%M:%S')"
          echo "::set-output name=repository_name::$(echo ${{ github.repository }} | sed -e 's/${{ github.repository_owner }}\///')"

      # Create new version tag
      - name: Create Release tag
        id: get-new-version-tag
        run: |
          poetry version ${{ env.BUMP_RULE }}
          echo "::set-output name=TAG::$(poetry version -s)"

      # If this is a production release action, then reset dev version to main's new version
      - name: Update Release tag on dev
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/checkout@v4
        with:
          path: dev-branch
          ref: dev
      - name: Reset dev version to main's
        if: success() && github.ref == 'refs/heads/main'
        run: cd ./dev-branch && poetry version ${{ steps.get-new-version-tag.outputs.TAG }} && cd ..
      - uses: EndBug/add-and-commit@v9
        if: success() && github.ref == 'refs/heads/main'
        with:
          message: "main 브랜치의 ${{ steps.get-new-version-tag.outputs.TAG }} 버전 Release에 따른 dev 버전 갱신 [skip ci]"
          add: "pyproject.toml"
          cwd: ./dev-branch
          pathspec_error_handling: exitImmediately
      - if: success() && github.ref == 'refs/heads/main'
        run: rm -rf dev-branch

      # Build and Push Docker image to ECR
      - name: Build and Push Docker image to ECR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.AWS_ECR_REGISTRY }}:${{ steps.get-new-version-tag.outputs.TAG }},${{ env.AWS_ECR_REGISTRY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ./infra/Dockerfile
          platforms: linux/amd64
          provenance: false
          build-args: |
            GIT_HASH=${{ github.sha }}
            IMAGE_BUILD_DATETIME=${{ steps.info.outputs.date }}

      # Commit new deployment version
      - uses: EndBug/add-and-commit@v9
        with:
          message: "${{ steps.get-new-version-tag.outputs.TAG }} 버전 Release"
          tag: ${{ steps.get-new-version-tag.outputs.TAG }}
          add: "pyproject.toml"
          pathspec_error_handling: exitImmediately

      # Checkout and import zappa config from pyconkr-secrets repo
      - name: Checkout secrets repo
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.PYCONKR_SECRET_REPOSITORY }}
          ssh-key: ${{ secrets.PYCONKR_SECRET_REPOSITORY_DEPLOY_KEY }}
          path: secret_envs
          clean: false
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            ${{ steps.info.outputs.repository_name }}/zappa_settings.json
      - run: mv secret_envs/${{ steps.info.outputs.repository_name }}/zappa_settings.json ./zappa_settings.json && rm -rf secret_envs

      # Zappa update
      - name: Zappa Update
        run: poetry run zappa update ${{ env.API_STAGE }} --docker-image-uri ${{ env.AWS_ECR_REGISTRY }}:${{ steps.get-new-version-tag.outputs.TAG }}

      - name: Collect staticfiles
        run: poetry run zappa manage ${{ env.API_STAGE }} "collectstatic --no-input"

      # Notify to Slack (Success)
      - name: Notify deployment to Slack
        if: failure() || cancelled()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ vars.SLACK_DEPLOYMENT_ALERT_CHANNEL }}
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.get-new-version-tag.outputs.TAG }} 버전 배포 실패 :rotating_light: (${{ job.status }})",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {"type": "mrkdwn", "text": "GitHub Action 바로가기"},
                  "accessory": {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "${{ github.run_id }}"},
                    "value": "github_action",
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      # Notify to Slack (Failure)
      - name: Notify deployment to Slack
        uses: slackapi/slack-github-action@v1.26.0
        with:
          channel-id: ${{ vars.SLACK_DEPLOYMENT_ALERT_CHANNEL }}
          payload: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${{ steps.get-new-version-tag.outputs.TAG }} 버전 배포 성공 :tada:",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "text": {"type": "mrkdwn", "text": "GitHub Action 바로가기"},
                  "accessory": {
                    "type": "button",
                    "text": {"type": "plain_text", "text": "${{ github.run_id }}"},
                    "value": "github_action",
                    "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                    "action_id": "button-action"
                  }
                }
              ]
            }
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
